---
title: async4j documentation
---

### Introduction
Async4j is a library that provides callback based control flow for asynchronous 
programing model: pipe, try/catch/finaly, condition, foreach and even parallel foreach.

### Concepts

#### Callbacks
At the heart of async4j library is the Callback interface used
to capture the completion of asynchronous call, whatever normal or
abnormal completion:

```java
public interface Callback<R>{
  public void completed(R result);
  public void error(Throwable t);
}
```

The callback interface has nothing very new, it is the well
known completion event listener widely used in existing asynchronous
interaction and generally implements the logic to be run on the
notification of the task end. The use of callbacks from async4j
differ slightly as its implementations are intended to contain flow
control logics such as those provided in this the library and not
application logics that should be implemented in asynchronous
functions as described in the following section.

#### Asynchronous function
From async4j perspective, asynchronous functions has following prototype

```java
public void operation(Callback<R> k, P1 p1, P2 p2, ...)
```

It takes at least one callback object as parameter that must
be notified exactly one time on completion of the asynchronous
function :
* `k.completed(R r)` when the function completed successluly with the asynchronous function output passed as
parameter R to the callback. This function should be call at the tail call position to have asynchronous flows work properly.
* `k.error(Throwable e)` to report any exception occured during the asynchronous function execution.

The asynchronous function has no return value and must not throw any
exception because both should be reported to the callback object. The
callback parameter is passed as first parameter and always named k
for practical reasons:
* It serves as a clean and distinctive marker of asynchrnous fucntions
* Let pet place to pass variable length args when need

#### Asynchronous function template
The asynchronous code template guive some guidelines to code asynchronous fucntions

```java
public void operation(Callback<R> k, P p){
  try{
    // Application logic here
    R result = // some result value
    k.completed(result)
  } catch(Throwable t){ k.error(t) }
}
```

It is not advisable to catch `Throwable` but here the asynchronous call
contract do not allow exception to be thrown the the calling thread.


#### Synchronous vs Asynchronous call

Most of asynchronous controls provided by async4j actually make use
of callback stack in the same way synchronous function call semantics
is based on call frame stacks that are transparently managed in the
assembly or bytecode generated by the compiler. The callback object
passed to the asynchronous function can be seen as the continuation
object the same way the call frame has a return address. When the
method `k.completed(R r)` is called at the tail position 
(what should be the case generally) it
play the same role as `return` instruction. 
Similar to the error handling with synchronous call, any
exception reported through a callback is bubbled up to parent
callbacks until it reach a callback that implements specific handling
mecanism like cacth or finally callbacks. With these similitudes in
mind, callbacks notiifcations will be named asynchronous return or
asynchronous throw.

### Controls


#### Future callback
It is the equivalent of the Future based asynchronous call where the
result is provided on the calling thread stack. The getResult()
method blocks until the end of asynchronous operation the
futurecallback is passed to, then it return a value or throws
exception depending on the completion status. The following helper
method used to call synchronously an asynchronous is implemented used
the FutureCallback as following

```java
public static <P , R> R call(P p, Task<P , R> task) {
	FutureCallback<R> k = new FutureCallback<R>();
	task.run(k, p);
	return k.getResult();
}
```

This call back is useful when a thread to be kept until the
asynchronous task end, the main thread if it is the single non daemon
thread in the jvm, unit test thread or threads bound to transactions
for instance. It is the sole callback object that do not have parent.

#### Pipe

The Pipe is a construct that combines two asynchronous operations by
calling them sequentially using the pipe callback.
```java
String s = Async.call(10, new PipeTask<>(new Task<Integer , Long>() {
		public void run(Callback<? super Long> k, Integer p) {
			k.completed(10 * 2L);
		}
	}, new Task<Long, String>() {
		public void run(Callback<? super String> k, Long p) {
			k.completed(p.toString());
		}
	}));
```

On invocation, the pipe construct delegate the call to the first task using a PipeCallback created with initial callback as parent and 
a reference to the second operation. On successful completion of the first operation, the PipeCallback use the output value along with
the parent callback to call the second operation. When the first operation ends with error, the PipeCallback forward the exception to the parent
callback, the second operation is not invoked.

// Pipe text
In the exemple above two tasks have been chained that is quite simple. More than two tasks can been chained like exemple below:
// four chaining exemple here
It is the asynchronous equivalent of
// synchronous equivalent code.
Here again simple control. The difficulties come when a task need more than one value whitch come not only from preceding task. For exemple consider folowing synchronous exemple:
// synchronous exemple with multiple input
To the asynchronous version of the exemple we will need to convey the d value through the second task to send it to the last task. To do that in Java language a structure class need to be created to bold theses two values but as may guess doing that will end with combersome parameter classes. That is a sample use case where Tuple in Java would help like in Scala. Actually, Scala bring more than than Tuple, the delimited continuation which simplify considerably asynchronous operation chaining.
// exemple scala

#### Nesting asynchronous calls

Asynchronous operation may call another asynchronous operation in a way that match rules stated above.


```java
public void operation(Callback<R> k, P p){
  try{
    // Do some processing with your parameter p 
    anotherOperation(k, p, ...)
  } catch(Throwable t){ k.error(t) }
}
```

In The callback object is delegated to the anotherOperation() which will take the 
responsability to call methods on the callback object which means the value returned 
asynchronously to the initial caller is one provided by ̀anotherOperation()̀. 
The try/catch is needed to report any exception that occures in the operation proper code.
The call to the nested asynchronous operation is the last instruction (tail call actualy)
to make sur only one error is reported to the callback object. In fact the nested
asynchrnous operation is tail call is a tail call that mey occured before the
call of `anotherOperation()`

#### Asynchronous condition

It is the asynchronous form of the if else blocs found in proggramming languages. 
It combine two asynchronous operations where the first as the condition that returns 
a boolean and the second the operation to run when the boolean value is true.
the asynchronous condition flow logic is impoemented using ConditionCallback. 
It holds reference to the body operation that is invoked when a boolean value 
true is passed to the completed() meyhod. outpipe described above as that is 
it chain two asynchronous operations, the first one returns a boolean value. 
The second operation is incoked only when the first one return true, otherwise 
the flow is passed to the parent callback on the stack.


#### Asynchronous try / catch / finally

The asynchronous exception handling using callback based controls is very 
similar to the try catch finally block natively provided in existing programing languges. 
It consist in asynchronous try block that represents the application logic subject 
to a failure, the catch block which is called on exception and the finally which 
is called whatever status of previous blocks is. 

The asynchronous catch block accept a Throwable object as paramater and may rethrow 
an exception or return normally a value. The finally block has no parameter other 
than the callback object and returns only void value. The intent is to simplify 
the prototype of final blocks. Asynchronous exceptions thrown from the finally 
block are bubbled up to the parent callback.

#### Asynchronous while
The asynchronous while is composed of condition and body that are asynchronous task both. 
The condition take an input value of a type that match boby output type. Basically, 
The body is called while the condition return the boolean value true and the loop ends 
when condition retirns value false or an exception occured, very similar to language while loop.
// to complete side effect context

#### Asynchronous do while
The asynchronous repeat is similar to the asynchronous while but with one difference, 
the body is called first. It is the same logic as those implemented in programming language.

#### Asynchronous foreach
The general principle of the foreach loop is iterate over as set of item and call an operation for each of them. 
In the async4j library, the set of elements are represented by two models of asynchronous data generators, 
pull and push based generator respectively represented by Enumerator and Producer interfaces.

#### IteratorAsync and EnumeratorAsync
IteratorAsync and EnumeratorAsync are pull based generators as they provide each element on demand by calling 
appropriate asynchronous method next() methods. IteratorAsync is the asynchrone equivalent of Iterator from 
collection java collection API where synchronous methods hasNext() and next() methods and repaced 
by thier asynchronous equivalent hasNext(Callback<Boolean> k) and next(Callback<E> k). 
EnumeratorAsync is the campacted form of IteratorAsync where methods hasNext and next are combined 
into a single method next() that take Callback2 callback interface which accept two values on completion. 
The first returned value is of type boolean and indicates whether an item is returned or not:


* if true the second value of generic type T can be used as an element even it is null.</li>
* a false value means no more element is available from the source and The second value must be ignored whatever it is null or not.</li>

#### ProducerAsync
The push data source model is specified by ProducerAsync interface that define the asynchronous method ´produce()´ which take 
the ConsumerAsync interface as element handler or consumer:
// element handler code here

When the method produce is called, the producer submit each element to to the consumer through the asynchronous 
`consume()` method of the consumer which returns asynchronously at the end on element processing using the 
callback provided in the parameter. Depending on implementation, the Producer may generate more than one elements 
simultaneously and means Element handler can be called concurrently. 

The notifcation of the callback passed to the Producer.produce() method marks the end of element generation.

#### Asynchronous Foreach
This construct iterate  over elements  and sequentially call an asynchronous  iteration function for each. 
That is, the iteration funtion complete before proceed to the next element.


The asynchronous foreach flow logic is implemented using combination of two callbacks the nextcallback and iterationcallback.
The nextcabk is passed as completion handler to the method Enumerator `next()` to request the the next element from the asynchronous iterator. 
Element returned if any is passed asynchronously to iteration task using the iteration callback as completion handler. 
On the completion of the iteration task, iterationcall ack  call the `next()` using the nextcallback to continue the loop. 
The cycle continue until the enimerator returns no element or and  exception occured, the flow is then back to the parent 
callback through `completed()` or `error()` methods respectivelly.

Here is an exemple of Socket reading stream

// exemple here

#### Asynchronous parallel foreach
Like the foreach flow discussed previously, the parallel foreach iterate over elements and call an iteration for each. 
The main difference lie in the of Producer as source of elements which are processed as they are submitted to the 
consumer this construct implements.

But the difference is elements generations and iteration task executions are decoupled in two separate asynchronous flows of executions, one for element generation from producer and the other for elements processing. That is, element generation are not directly coupled to completion of the iteration task and more than one iteration task can being executed at the same moment. 
When called, the parallel foreach construct initiate elements generation by calling produce() method passing an implemention of consumer that call iteration task on a separate asynchrone flow using a callback that make a separate branch of execution flow.
// picture of parallel branches
The parallel foreach is completed when the `Producer.produce()` and all iteration tasks call are completed. 
Hereunder an example of parallel foreach code
// exemple without flow control
It use and iterator producer that generates elements from synchronous iterator implemented by a range generating number. The application logic implemented in the iteration task is quitte simple, it just cumulate numbers values for consistancyr check. The iteration task is wrapped with an ExecutorTask by DSL function withPool() to have parallel actual parallelism as this construct has no internal thread. In fact the foreach loop can work without thread pool as following:
// exemple without thread pool
In this specific case where only the calling thread will execute the code, instructions are executed sequentially and there is no parallelism. 
In some use cases, the producer can be the source of parallelism like the JmsListenerProducer. When the underlying Jms system is configured to deliver more than one message at the same moment, iterations can be executed in pararel way:
// jms producer example
Obviously, Producer and Consumer can be both source of parallelism:
// jms producer with withpool
These exemples show how flexible is the parallel foreach cinstruct in regard to the thread pooling by decoupling the element generation flow from processing's one. However that open the flow control question discussed in the next section.
In some situation, producer can generate elements faster than Consumer can process and male system overloaded.
The chalenge with the parallel foreach constuct the differeitem generation controle as the consumer may process elements at a rate less than what Producer generate. Following approaches help on this.
Producer auto regulation
A producer is auto regulated when the number of pending calls to the Cosumer consume() method is limited. One exemple of auto regulated In that case, the producer has a finit limit of pending consume() call. For instance a Producer composed of a finite set of Asynchronous foreachs loops that iterate sequentially over Enumerator to submit elements to the consumer.
Stop the producer
The idea is to send a stop signal to the Producer when the consumer get overload and sends restart signal when lowest threadhold is reached. 

##### Asynchronous Flow Controller
The flow controller is an asynchronous task interceptor that manage the number of concurrent invocations of a task given the limitation of system resources like like available memory, number of cpu / core. The limitations may also depends on external factors like database maximum number of connections or the maximum number of concurrent requests allowed by a web server. 
The flow control is implemented by observing the load indicator before and after the controlled task. On invocation, the flow controller check the load indicator, than loareach the pre defined limit it buffering when the load of resource reach the maximum limit, asynchronous parametrs including the callbak object Are staged in memory which has effect asynchronous call blocking As the callback object is not notified. Staged call are resumed when the load dicrease below the predefined limit, the flow controller then recall the subsequent task with the same parameters.
The async4j provides some implementztion of flow controller described below.
* NoFlowController juste delegates calls to the wrapped task without any staging
* MaxjobFlowController limits the number of concurrent t calls to the wrapped task. When the limit is reached calls are staged in Concurrent non blocing queue, and resumed once some call terminates. Note that there is no priority defined between the new calls and staged ones.
* EnumeratorController: it is an optimized flow controller optimezed for Producer that generate element sequencially. In this case A single reference is used as staging instead of queue as there is no concurrent.
// data and task parallelism
